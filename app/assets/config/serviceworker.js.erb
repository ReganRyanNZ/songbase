var CACHE_VERSION = 'v2';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';
var LOGGING = false;

if(LOGGING) { console.log('serviceworker.js.erb is loaded!'); }

// add to cache
function onInstall(event) {
  if(LOGGING) { console.log('[Serviceworker]', "Installing!", event); }
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        // note: not sure if root path can be added here
        '<%= asset_path "application.js" %>',
        '<%= asset_path "application.css" %>',
        '/',
        '/favicon.ico',
        '/favicon-16x16.png',
        '/favicon-32x32.png',
        '/offline.html'
      ]);
    })
  );
}

// destroy stale caches
function onActivate(event) {
  if(LOGGING) {  console.log('[Serviceworker]', "Activating!", event);}
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}





// note this may get wild with my offline navigation
// Borrowed from https://github.com/TalAter/UpUp
function onFetch(event) {
  let response = fetch(event.request)
    .then((response) => response)
    .catch(function() {
      if(LOGGING) { console.log('[Serviceworker]', "Fetching!", event); }

      // if it fails, try to return request from the cache
      return caches.match(event.request).then(function(response) {
        if(LOGGING) { console.log('Found a response in cache: ', response); }
        if (response) {
          return response;
        }

        // if not found in cache, return default offline content for navigate requests
        getRequest = event.request.mode === 'navigate' || (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))
        if (getRequest) {
          if(LOGGING) { console.log('[Serviceworker]', "Fetching offline app", event); }
          return caches.match('/');
        }
        if(LOGGING) { console.log('Failed to fetch, and failed to find response in cache for: ', event.request); }
        return false;
      })
    })

  if(LOGGING) { console.log('Response: ', response) }
  event.respondWith(response)
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
